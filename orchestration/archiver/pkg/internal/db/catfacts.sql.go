// Code generated by sqlc. DO NOT EDIT.
// source: catfacts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getHappycatFact = `-- name: GetHappycatFact :one
SELECT id, fact, created_at
FROM happycat_facts
WHERE id = $1
ORDER BY id
`

func (q *Queries) GetHappycatFact(ctx context.Context, id uuid.UUID) (*HappycatFact, error) {
	row := q.db.QueryRow(ctx, getHappycatFact, id)
	var i HappycatFact
	err := row.Scan(&i.ID, &i.Fact, &i.CreatedAt)
	return &i, err
}

const listHappycatFacts = `-- name: ListHappycatFacts :many
SELECT id, fact, created_at
FROM happycat_facts
ORDER BY id
`

func (q *Queries) ListHappycatFacts(ctx context.Context) ([]*HappycatFact, error) {
	rows, err := q.db.Query(ctx, listHappycatFacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*HappycatFact
	for rows.Next() {
		var i HappycatFact
		if err := rows.Scan(&i.ID, &i.Fact, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveHappycatFact = `-- name: SaveHappycatFact :exec
INSERT INTO happycat_facts (id, fact)
VALUES ($1, $2)
`

type SaveHappycatFactParams struct {
	ID   uuid.UUID `json:"id"`
	Fact string    `json:"fact"`
}

func (q *Queries) SaveHappycatFact(ctx context.Context, arg SaveHappycatFactParams) error {
	_, err := q.db.Exec(ctx, saveHappycatFact, arg.ID, arg.Fact)
	return err
}
